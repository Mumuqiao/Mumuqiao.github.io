<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>博弈论 (Game)</title>
      <link href="2020/10/13/boyilun/"/>
      <url>2020/10/13/boyilun/</url>
      
        <content type="html"><![CDATA[<p>咕咕咕了好久终于记得更新了=-=这次随便整理一些以前的东西吧（氵）2020-10-13</p><h1 id="规则"><a class="header-anchor" href="#规则"></a>规则</h1><ul><li>公平博弈</li><li>PLAY TO WIN</li></ul><h1 id="巴什博奕-Bash-Game"><a class="header-anchor" href="#巴什博奕-Bash-Game"></a>巴什博奕 (Bash Game)</h1><p>​一堆里有n个物品，轮流取1~m个，最后取的为胜者<br>​根据公平博弈原理，一个人只要取k个另一个也一样取就可以将胜负态维持。此时根据同余定理：$ n = k\ast (m+1)+r  $ 此时只要先手拿走$r$个使得$（n-r）% (m+1) = 0$ 则先手必赢。若$ n = k \ast (m +  1) $,则先手必赢。</p><h1 id="威佐夫博弈-Wythoff-Game"><a class="header-anchor" href="#威佐夫博弈-Wythoff-Game"></a>威佐夫博弈 (Wythoff Game)</h1><p>​有<font color=red>两堆</font>各若干物品，两人轮流从任意一堆中取出大于零的任意个数或者从两堆中取出同样多的大于零的任意个数物品，最后取的为胜者。<br>​枚举每个必输的局势：$(0,0),(1,2),(3,5),(4,7),(6,10),(8,13),(9,15),(11,18),(12,20)$可以发现每组的$first$为前面没有出现过的最小整数，根据玄学找规律定理可以得到$first$的出现规律为黄金分割比，$second$出现的规律为$first + k $(k表示第k组必败态)。则有<br>$$ first = \lfloor k \ast (1+ \sqrt{5} \div 2 \rfloor$$<br>$$ second = first + k$$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> r = (<span class="built_in">sqrt</span>(<span class="number">5</span>) +<span class="number">1</span> )/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> d = <span class="built_in">abs</span>(a-b) * r;</span><br><span class="line"><span class="keyword">if</span>(d ！= min(a,b)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><h1 id="斐波那契博弈-Fibonacci-Nim-Game"><a class="header-anchor" href="#斐波那契博弈-Fibonacci-Nim-Game"></a>斐波那契博弈 (Fibonacci Nim Game)</h1><p>​一堆石子有n个，两人轮流取石子，先取的人可以取任意多个（大于零）石子，但不能一次取完，之后每次取的石子数不能超过上次取的石子数的<font color = blue>2倍</font>同时要大于零，最后取为胜者。</p><p>​当n不是斐波那契数时，先手必胜。</p><blockquote><p>证明：</p><ul><li>Zeckendorf定理（齐肯多夫定理）：任何正整数可以表示为若干个不连续的Fibonacci数只和。</li><li>当n不为Fibonacci数，如$28 = 21+5+2$，假如先手取2，则后手无法取5或更多，而5是Fibonacci数，那么一定是先手去取走这5颗石子中的最后一颗，同理推导到21颗，28颗。</li><li>当n为Fibonacci数，如89，则设先手取x颗：</li></ul><ol><li>当$ x \geq 34$即89的前两项，则后手必赢</li><li>当$ x  \lt 34$，则此时剩下的数介于55~89之间，不为Fibonacci数，把$y = n-x$分解为Fibonacci数: $ y = 55 + f[i]+…+f[j]$,若$f[j] \leq 2\times x$,则后手面临n不为Fibonacci数的情况，后手必赢</li></ol></blockquote><h1 id="尼姆博弈-Nimm-Game"><a class="header-anchor" href="#尼姆博弈-Nimm-Game"></a>尼姆博弈 (Nimm Game)</h1><p>​有n堆物品每堆物品的个数不定但大于1，两人轮流取，每次取任意一堆中物品不少于一个，最后取为胜者。</p><p>​在$(a,b,c)$状态下无论先手取什么，后手都可以在另外一堆里取相同的个数来抵消先手的影响，则可推出对于每一个堆物品的个数$m_i$，当$m_0 \oplus m_1 … \oplus m_n = 0$时先手必败，否则先手必胜</p><h1 id="SG函数"><a class="header-anchor" href="#SG函数"></a>SG函数</h1><p>​定义$mex$运算为不属于一个集合的最小正整数，对于一个有向无环图，定义$G(x) = mex\big(G(y)\big)$y为x的后继节点。将每一堆有$x_i$个石子看成$G(x_i)$,则$SG(i) = G(x_i)$，打表枚举每一个$G(x_i)$,则可得到规律,若没有规律就打表暴力过题:)</p><p>对于<a href="http://acm.hdu.edu.cn/showproblem.php?pid=3032">HDU-3032</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;<span class="comment">//SG函数打表</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;<span class="comment">//枚举100个状态</span></span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">            vis[sg[i-j]]=<span class="literal">true</span>;   <span class="comment">//对每个i下可以到达的状态枚举</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;i;j++)&#123;<span class="comment">//特殊枚举，枚举分成两块的状态</span></span><br><span class="line">            vis[sg[j]^sg[i-j]]=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;;j++)&#123; <span class="comment">//找mex</span></span><br><span class="line">            <span class="keyword">if</span>(!vis[j])&#123;</span><br><span class="line">                sg[i]=j;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;sg[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后可以得到规律</p><p>$$<br>G(x) = \begin{cases}<br>x-1&amp; &amp;(x \mod 4 &amp;= 0) \\<br>x&amp; &amp;(x\mod4&amp;=1&amp;2) \\<br>x+1&amp; &amp;(x\mod4 &amp;=3)<br>\end{cases}<br>$$</p><p>之后判断$SG(1)\oplus SG(2) \oplus … \oplus SG(i) \oplus … \oplus SG(n) == 0$即可得到答案</p><h1 id="不公平博弈"><a class="header-anchor" href="#不公平博弈"></a>不公平博弈</h1><p>纯粹找规律，作弊的一方在物品堆数增加到一定个数时比能够改变胜负态来达到无论如何都必赢的状态，枚举全1的特殊态找规律即可</p><p>2018CCPC 杭州 C  Hakase and Nano （没写题解=-=）</p>]]></content>
      
      
      <categories>
          
          <category> ACM模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博弈论 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一个神经网络程序</title>
      <link href="2020/08/20/FristNN/"/>
      <url>2020/08/20/FristNN/</url>
      
        <content type="html"><![CDATA[<blockquote><p>引用自<a href="https://zhuanlan.zhihu.com/p/67682601">知乎</a></p></blockquote><h1 id="神经网络"><a class="header-anchor" href="#神经网络"></a>神经网络</h1><h2 id="简介"><a class="header-anchor" href="#简介"></a>简介</h2><p>神经网络包含输入层，隐藏层，激活层，输出层，Softmax层以及Cross Entropy Error层</p><p>传播公式为 ==$H = X \ast W + b$==</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">affine_forward</span>(<span class="params">x,w,b</span>):</span></span><br><span class="line">    out = <span class="literal">None</span></span><br><span class="line">    N = x.shape[<span class="number">0</span>]</span><br><span class="line">    x_row = x.reshape(N, <span class="number">-1</span>)</span><br><span class="line">    out = np.dot(x_row, w) + b</span><br><span class="line">    cache = (x, w, b)</span><br><span class="line">    <span class="keyword">return</span> out, cache</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">affine_backward</span>(<span class="params">dout, cache</span>):</span></span><br><span class="line">    x, w, b = cache</span><br><span class="line">    dx, dw, db = <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line">    dx = np.dot(dout, w.T)</span><br><span class="line">    dx = np.reshape(dx, x.shape)</span><br><span class="line">    x_row = x.reshape(x.shape[<span class="number">0</span>], <span class="number">-1</span>)</span><br><span class="line">    dw = np.dot(x_row.T, dout)</span><br><span class="line">    db = np.sum(dout, axis = <span class="number">0</span>, keepdims = <span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> dx, dw, db</span><br><span class="line"></span><br><span class="line"><span class="comment">#训练数据</span></span><br><span class="line">X = np.array([[<span class="number">2</span>, <span class="number">1</span>],</span><br><span class="line">             [<span class="number">-1</span>, <span class="number">1</span>],</span><br><span class="line">             [<span class="number">-1</span>, <span class="number">-1</span>],</span><br><span class="line">             [<span class="number">1</span>, <span class="number">-1</span>]])</span><br><span class="line">t = np.array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])  <span class="comment">#标准结果</span></span><br><span class="line">np.random.seed(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">input_dim = X.shape[<span class="number">1</span>]</span><br><span class="line">num_classes = t.shape[<span class="number">0</span>]</span><br><span class="line">hidden_dim = <span class="number">50</span></span><br><span class="line">reg = <span class="number">0.001</span>  <span class="comment">#正则化强度</span></span><br><span class="line">epsilon = <span class="number">0.001</span>  <span class="comment">#学习率</span></span><br><span class="line"></span><br><span class="line">W1 = np.random.randn(input_dim,hidden_dim)</span><br><span class="line">W2 = np.random.randn(hidden_dim, num_classes)</span><br><span class="line">b1 = np.zeros((<span class="number">1</span>, hidden_dim))</span><br><span class="line">b2 = np.zeros((<span class="number">1</span>, num_classes))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">10000</span>):</span><br><span class="line">    <span class="comment">#向前传播</span></span><br><span class="line">    H, fc_cache = affine_forward(X, W1, b1)</span><br><span class="line">    H = np.maximum(<span class="number">0</span>, H) <span class="comment">#激活层</span></span><br><span class="line">    relu_cache = H</span><br><span class="line">    Y, cachey = affine_forward(H, W2, b2)</span><br><span class="line">    <span class="comment">#Softmax</span></span><br><span class="line">    probs = np.exp(Y-np.max(Y, axis=<span class="number">1</span>, keepdims=<span class="literal">True</span>))</span><br><span class="line">    probs /= np.sum(probs, axis=<span class="number">1</span>, keepdims=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment">#loss值</span></span><br><span class="line">    N = Y.shape[<span class="number">0</span>]</span><br><span class="line">    print(probs[np.arange(N)], t)</span><br><span class="line">    loss = -np.sum(np.log(probs[np.arange(N), t])) / N</span><br><span class="line">    print(loss)</span><br><span class="line">    <span class="comment">#反向传播</span></span><br><span class="line">    dx = probs.copy()</span><br><span class="line">    dx[np.arange(N), t] -= <span class="number">1</span> <span class="comment">#</span></span><br><span class="line">    dx /= N  <span class="comment">#反向传播到softmax前</span></span><br><span class="line">    dh1, dW2, db2, = affine_backward(dx, cachey)</span><br><span class="line">    dh1[relu_cache &lt;= <span class="number">0</span>] = <span class="number">0</span> <span class="comment">#激活层前</span></span><br><span class="line">    dX, dW1, db1 = affine_backward(dh1,fc_cache)</span><br><span class="line"></span><br><span class="line">    dW2 += reg * W2</span><br><span class="line">    dW1 += reg * W1</span><br><span class="line">    W2 += -epsilon * dW2</span><br><span class="line">    b2 += -epsilon * db2</span><br><span class="line">    W1 += -epsilon * dW1</span><br><span class="line">    b1 += -epsilon * db1</span><br><span class="line"></span><br><span class="line">test = np.array([[<span class="number">2</span>,<span class="number">2</span>],[<span class="number">-2</span>,<span class="number">2</span>],[<span class="number">-2</span>,<span class="number">-2</span>],[<span class="number">2</span>,<span class="number">-2</span>]])</span><br><span class="line">H,fc_cache = affine_forward(test,W1,b1)               <span class="comment">#仿射</span></span><br><span class="line">H = np.maximum(<span class="number">0</span>, H)                                  <span class="comment">#激活</span></span><br><span class="line">relu_cache = H</span><br><span class="line">Y,cachey = affine_forward(H,W2,b2)  <span class="comment">#仿射</span></span><br><span class="line"> <span class="comment"># Softmax</span></span><br><span class="line">probs = np.exp(Y - np.max(Y, axis=<span class="number">1</span>, keepdims=<span class="literal">True</span>))</span><br><span class="line">probs /= np.sum(probs, axis=<span class="number">1</span>, keepdims=<span class="literal">True</span>)  <span class="comment"># Softmax</span></span><br><span class="line">print(probs)</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    print(test[k,:],<span class="string">&quot;所在的象限为&quot;</span>,np.argmax(probs[k,:])+<span class="number">1</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 神经网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 神经网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客多校第九场</title>
      <link href="2020/08/10/nowcoderM9/"/>
      <url>2020/08/10/nowcoderM9/</url>
      
        <content type="html"><![CDATA[<h1 id="A-Groundhog-and-2-Power-Representation"><a class="header-anchor" href="#A-Groundhog-and-2-Power-Representation"></a>A-<a href="https://ac.nowcoder.com/acm/contest/5674/A">Groundhog and 2-Power Representation</a></h1><p>一道简单的字符串替换题，主要是考高精运算。运用python较为简单</p><h2 id="模拟法"><a class="header-anchor" href="#模拟法"></a>模拟法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">s = input()</span><br><span class="line">res = <span class="number">0</span></span><br><span class="line">array = []</span><br><span class="line">length = len(s)</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; length:</span><br><span class="line">    <span class="comment"># print(i)</span></span><br><span class="line">    <span class="keyword">if</span> s[i] == <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> s[i] == <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">        tmp = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> array[<span class="number">-1</span>] != <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">            tmp += int(array[<span class="number">-1</span>])</span><br><span class="line">            array.pop()</span><br><span class="line">        array.pop()</span><br><span class="line">        array.pop()</span><br><span class="line">        array.append(<span class="number">2</span> ** tmp)</span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> s[i] == <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">            array.append(s[i])</span><br><span class="line">            i = i + <span class="number">1</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        tmp = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; length <span class="keyword">and</span> s[i] != <span class="string">&#x27;(&#x27;</span> <span class="keyword">and</span> s[i] != <span class="string">&#x27;)&#x27;</span> <span class="keyword">and</span> s[i] != <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">            tmp += s[i]</span><br><span class="line">            i = i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> tmp != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            array.append(tmp)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            i = i + <span class="number">1</span></span><br><span class="line">    <span class="comment"># print(array)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(array)):</span><br><span class="line">    res += int(array[i])</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2(2+2(10))</span></span><br><span class="line"><span class="comment"># 2(2+2(3))</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="运用库函数快速解决"><a class="header-anchor" href="#运用库函数快速解决"></a>运用库函数快速解决</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = input()</span><br><span class="line">print(eval(s.replace(<span class="string">&#x27;(&#x27;</span>,<span class="string">&#x27;**(&#x27;</span>)))</span><br></pre></td></tr></table></figure><h1 id="E-Groundhog-Chasing-Death"><a class="header-anchor" href="#E-Groundhog-Chasing-Death"></a>E - <a href="https://ac.nowcoder.com/acm/contest/5674/E">Groundhog Chasing Death</a></h1><ul><li>唯一分解定理，筛选质因子，费马小定理</li></ul><p>运用唯一分解定理与gcd的结合很快就可以得到思路。</p><p>这题有两个坑：</p><ol><li><p>不能直接使用欧拉筛的方法筛选出质因子，因为数据范围太大了。</p></li><li><p>在求结果的时候先把幂次相加并用费马小定理减小幂次，不然会TLE</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353</span></span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a, ll n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll re = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>)</span><br><span class="line">            re = (re * a) % mod;</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        a = (a * a) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> re % mod;</span><br><span class="line">&#125;</span><br><span class="line">ll a, b, c, d, x, y;</span><br><span class="line">ll ans;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    ll aa = <span class="number">0</span>, bb = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (x % p == <span class="number">0</span>) x /= p, aa++;</span><br><span class="line">    <span class="keyword">while</span> (y % p == <span class="number">0</span>) y /= p, bb++;</span><br><span class="line">    <span class="keyword">if</span> (!aa || !bb) <span class="keyword">return</span>;</span><br><span class="line">    ll tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (ll i = a; i &lt;= b; i++) &#123;</span><br><span class="line">        ll j = aa * i / bb;</span><br><span class="line">        ll cur, now;</span><br><span class="line">        <span class="keyword">if</span> (j &lt; c) cur = (d - c + <span class="number">1</span>) * i % (mod<span class="number">-1</span>) * aa % (mod<span class="number">-1</span>);   <span class="comment">//费马小定理以及幂次相加</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (j &gt;= d) cur = (c + d) * (d - c + <span class="number">1</span>) / <span class="number">2</span> % (mod<span class="number">-1</span>) * bb % (mod<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            now = (c + j) * (j - c + <span class="number">1</span>) / <span class="number">2</span> % (mod<span class="number">-1</span>) * bb % (mod<span class="number">-1</span>);</span><br><span class="line">            cur = (now + (d - j) * i % (mod<span class="number">-1</span>) * aa % (mod<span class="number">-1</span>) )% (mod<span class="number">-1</span>);</span><br><span class="line">             &#125;</span><br><span class="line">        tmp = (tmp + cur) % (mod<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ans = ans * qpow(p, tmp) % mod;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ans = <span class="number">1l</span>l;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld%lld%lld%lld&quot;</span>,&amp;a,&amp;b,&amp;c,&amp;d,&amp;x,&amp;y);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">2</span>; k &lt;= x; k++) <span class="keyword">if</span> (x % k == <span class="number">0</span>) solve(k);  <span class="comment">//筛选质因子</span></span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">1</span>) solve(x);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p><h1 id="F-Groundhog-Looking-Dowdy"><a class="header-anchor" href="#F-Groundhog-Looking-Dowdy"></a>F- <a href="https://ac.nowcoder.com/acm/contest/5674/F">Groundhog Looking Dowdy</a></h1><p>尺取法就可以过了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> val, id;</span><br><span class="line">&#125;a[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">mycmp</span><span class="params">(Node a, Node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.val &lt; b.val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> book[N];</span><br><span class="line"><span class="keyword">int</span> num[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m, k = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;k);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; ++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[++cnt].val);</span><br><span class="line">a[cnt].id = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sort(a + <span class="number">1</span>, a + cnt + <span class="number">1</span>, mycmp);</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">1</span>, r = <span class="number">2</span>, size = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0x7f7f7f7f</span>;</span><br><span class="line"></span><br><span class="line">book[a[l].id] = <span class="literal">true</span>;</span><br><span class="line">num[a[l].id] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (book[a[r].id] == <span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">++size;</span><br><span class="line">book[a[r].id] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">++num[a[r].id];</span><br><span class="line"><span class="keyword">while</span> (l &lt; r &amp;&amp; r &lt;= cnt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (size &lt; m)</span><br><span class="line">&#123;</span><br><span class="line">++r;</span><br><span class="line"><span class="keyword">if</span> (book[a[r].id] == <span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">++size;</span><br><span class="line">book[a[r].id] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">num[a[r].id] ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ans = min(ans, a[r].val - a[l].val);</span><br><span class="line"><span class="keyword">if</span> (num[a[l].id] == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">num[a[l].id] = <span class="number">0</span>;</span><br><span class="line">book[a[l].id] = <span class="literal">false</span>;</span><br><span class="line">--size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">--num[a[l].id];</span><br><span class="line">&#125;</span><br><span class="line">++l;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="I-The-Crime-solving-Plan-of-Groundhog"><a class="header-anchor" href="#I-The-Crime-solving-Plan-of-Groundhog"></a>I-<a href="https://ac.nowcoder.com/acm/contest/5674/I">The Crime-solving Plan of Groundhog</a></h1><p>题解证明:</p><blockquote><p>把当前的数字拆成4个数 𝑎,𝑏,𝑐,𝑑(𝑎 ≤ 𝑏 ≤ 𝑐 ≤ 𝑑) ,那么我们有两种决策：两位数×两位数，或者三位数×一 位数。</p><ul><li><p>10𝑎 + 𝑑 ⋅ 10𝑏 + 𝑐 = 100𝑎𝑏 + 10𝑎𝑐 + 10𝑏𝑑 + 𝑐𝑑</p></li><li><p>100𝑏 + 10𝑐 + 𝑑 ⋅ 𝑎 = 100𝑎𝑏 + 10𝑎𝑐 + 𝑎𝑑 &lt; 10𝑎 + 𝑑 ⋅ 10𝑏 + 𝑐</p></li></ul><p>同理类推， 可以证明留一个最小的正整数作为第一个数，剩下的所有数字排成最小的数作为第二个数时，答案取到最 小值。<br>注意高精度细节和“正整数”、“整数”的区分，以及前导0的处理</p><p align="right">---来自官方的题解证明</p></blockquote><p>这题全靠xdl大胆猜想过的 😄</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1000010</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn], b[maxn * <span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mulity</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s, <span class="keyword">const</span> <span class="built_in">string</span>&amp; p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ls = s.length();</span><br><span class="line"><span class="keyword">int</span> lp = p.length();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ls; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; lp; ++j) &#123;</span><br><span class="line">b[i + j] += (s[i] - <span class="string">&#x27;0&#x27;</span>) * (p[j] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">b[i + j + <span class="number">1</span>] += b[i + j] / <span class="number">10</span>;</span><br><span class="line">b[i + j] %= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> len = ls + lp;</span><br><span class="line"><span class="keyword">while</span> (len &gt;= <span class="number">1</span> &amp;&amp; b[len - <span class="number">1</span>] == <span class="number">0</span>) --len;</span><br><span class="line">reverse(b, b + len);</span><br><span class="line"><span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="number">0</span>), <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="keyword">sizeof</span>(b));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">sort(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">string</span> s, p;</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (l &lt;= n &amp;&amp; a[l] == <span class="number">0</span>) ++l;</span><br><span class="line">s += a[l] + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">p += a[l + <span class="number">1</span>] + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = l - <span class="number">1</span>; i &gt;= <span class="number">1</span>; --i) p += <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = l + <span class="number">2</span>; i &lt;= n; ++i) p += a[i] + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">reverse(p.begin(), p.end());</span><br><span class="line"><span class="keyword">int</span> len = mulity(s, p);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) <span class="built_in">cout</span> &lt;&lt; b[i];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="K-The-Flee-Plan-of-Groundhog"><a class="header-anchor" href="#K-The-Flee-Plan-of-Groundhog"></a>K-<a href="https://ac.nowcoder.com/acm/contest/5674/K">The Flee Plan of Groundhog</a></h1><p>有空再补 : )</p>]]></content>
      
      
      <categories>
          
          <category> 牛客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/08/06/hello-world/"/>
      <url>2020/08/06/hello-world/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown"><a class="header-anchor" href="#Markdown"></a>Markdown</h1><h2 id="font-color-red-size-5-千万千万千万不要用MarkPad-font"><a class="header-anchor" href="#font-color-red-size-5-千万千万千万不要用MarkPad-font"></a><font color = red size = 5>千万千万千万不要用MarkPad</font></h2><p><font color = #66ccff size = 4>Typora大法天下第一</font></p><p>遇到front-matter无法识别的情况只需要在上下同时加一个回车就好了,即:</p><blockquote><p>—</p><p>front-matter</p><p>—</p></blockquote><p>或者直接用<font color = #66ccfff>Typora</font></p><h2 id="添加emoji和task支持"><a class="header-anchor" href="#添加emoji和task支持"></a>添加emoji和task支持</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm un hexo<span class="literal">-renderer</span><span class="literal">-marked</span> <span class="literal">-S</span></span><br><span class="line">npm i hexo<span class="literal">-renderer</span><span class="literal">-markdown</span><span class="literal">-it</span> <span class="literal">-S</span></span><br><span class="line">npm i markdown<span class="literal">-it</span><span class="literal">-emoji</span> markdown<span class="literal">-it</span><span class="literal">-task</span><span class="literal">-lists</span> <span class="literal">-S</span></span><br></pre></td></tr></table></figure><p>在根目录的_config.yml中写入</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">markdown:</span></span><br><span class="line">  <span class="attr">render:</span></span><br><span class="line">    <span class="attr">html:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">xhtmlOut:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">breaks:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">linkify:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">typographer:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">plugins:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-footnote</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-sup</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-sub</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-abbr</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-emoji</span></span><br><span class="line">  <span class="attr">anchors:</span></span><br><span class="line">    <span class="attr">level:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">collisionSuffix:</span> <span class="string">&#x27;v&#x27;</span></span><br><span class="line">    <span class="attr">permalink:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">permalinkClass:</span> <span class="string">header-anchor</span></span><br><span class="line">    <span class="attr">permalinkSymbol:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><a href="https://www.jianshu.com/p/f9e57ecca150">这篇文章中</a>关于markdown-it的用法介绍的非常清楚。</p><h1 id="图床"><a class="header-anchor" href="#图床"></a>图床</h1><ul><li><font color = #66eegg size = 5>Github+jsDelivr+PicGo</font></li></ul><p><font size = 4>既能白嫖又能加速国内访问岂不妙哉~</font></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
